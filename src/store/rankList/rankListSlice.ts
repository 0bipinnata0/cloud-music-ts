import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { RootState, AppThunk } from "..";
import { getRankListRequest } from "../../api/request";
import type { IRank } from "../../api/request/getRankListRequest";

type IRankState = {
  rankList: IRank[];
  status: "idle" | "loading" | "failed";
};

const initialState: IRankState = {
  rankList: [],
  status: "idle",
};

const changeRankListAsync = createAsyncThunk<IRank[], void>(
  "rank/changeRankList",
  async () => {
    const response = await getRankListRequest();
    return response.data.list;
  }
);

export const rankListSlice = createSlice({
  name: "rank",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // changePageCount: (state, action: PayloadAction<number>) => {
    //   state.value.pageCount = action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // changeRankListAsync
      .addCase(changeRankListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(changeRankListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.rankList = action.payload;
      })
      .addCase(changeRankListAsync.rejected, (state) => {
        console.log("热门歌手数据获取失败");
        state.status = "failed";
      });
  },
});

export const {} = rankListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectRankList = (state: RootState) => state.rankList;

//第一次加载对应类别的歌手
export const changeRankList = (): AppThunk => {
  return (dispatch) => dispatch(changeRankListAsync());
};

export default rankListSlice.reducer;
