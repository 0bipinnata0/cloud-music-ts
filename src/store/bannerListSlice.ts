import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { RootState, AppThunk } from ".";
import { getBannerRequest } from "../api/request";

export type IBanner = {
  imageUrl: string;
};

type IBannerState = {
  value: IBanner[];
  status: "idle" | "loading" | "failed";
};

const initialState: IBannerState = {
  value: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getBannerAsync = createAsyncThunk(
  "banner/fetchBanner",
  async () => {
    const response = await getBannerRequest();
    // The value we return becomes the `fulfilled` action payload
    return response.data.banners;
  }
);

export const bannerListSlice = createSlice({
  name: "banner",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getBannerAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getBannerAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(getBannerAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const {} = bannerListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectBannerList = (state: RootState) => state.bannerList.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export const getBannerList = (): AppThunk => (dispatch, getState) => {
  // const currentValue = selectRecommendList(getState());
  dispatch(getBannerAsync());
};

export default bannerListSlice.reducer;
